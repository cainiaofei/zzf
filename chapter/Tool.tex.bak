\chapter{软件可追踪生成工具的设计与实现}

目前，针对结合用户反馈和代码依赖的软件可追踪问题，领域内还没有面向用户的工具。在本章中，我们介绍了软件可追踪生成工具的应用场景，并详细阐述了工具的设计与实现，该工具集成了我们结合用户反馈和代码依赖紧密度分析的软件可追踪生成方法。此外，我们结合一个案例说明工具的使用流程。

\section{应用场景}

在软件开发过程中，会衍生出各种与软件利益相关者对应的软件制品，如图~\ref{F:Tool_Scene}如需求、代码和测试集等。这些制品之间存在追踪关系，例如某个需求由哪些代码来实现，某个测试用例用来对哪些代码进行测试。通过各软件制品之间的追踪数据，软件利益相关者可以实时了解项目进度。但是在实际的敏捷软件开发中，手工建立软件制品之间的追踪关系耗时费力，容易出错。并且由于软件迭代速度比较快，人员流动性比较大，这都使得建立维护软件制品之间的追踪关系很困难。我们将介绍结合用户反馈和代码依赖的软件可追踪生成的过程。

软件可追踪生成工具结合代码依赖紧密度分析和用户反馈两部分信息，对通过信息检索方法形成的候选追踪线索排序表进行优化调整，
图~\ref{F:Tool_Scene}~中展示了软件可追踪生成辅助工具在软件可追踪建立场景中的作用效果。我们将从用户视角说明软件可追踪生成辅助工具的益处。

\begin{figure}[thb]
    \centering
    \includegraphics[width=1.0\textwidth]{./figures/tool/tool_scene.pdf}
    \caption{结合用户反馈和代码依赖紧密度分析的软件可追踪生成技术应用场景}
    \label{F:Tool_Scene}
\end{figure}

\begin{enumerate}

  \item 当用户需要软件系统需求到代码的追踪数据时，可以通过我们的辅助工具将软件按的需求和代码导入。一方面工具会使用信息检索技术计算需求和代码之间的文本相似度并按照相似度自大到小生成候选列表；另一方面，工具会运行系统的测试集并插桩代码依赖捕获工具得到软件运行过程中方法进入、退出和数据访问记录，并通过处理该数据得到软件的代码依赖。接下来会进入用户交互界面，工具推荐候选线索交由用户判断该候选线索的有效性。为了降低用户判断的成本，工具会展示与当前类代码依赖紧密度比较大的其它类，并显示它们的调用拓扑结构，同时用户可查看需求和类的文本信息。用户可以根据以上信息对追踪线索进行判断或者跳过该追踪线索的判断。工具会根据用户的反馈结果更新候选线索列表的排序。当用户不想再继续判断时，工具会向用户提供追踪线索排序表。一般情况下，对于每一个需求用户判断3.5\% 左右的候选追踪线索就就能使整个排序列表的准确率、完全率大幅度提升。即通过我们的工具，用户只需付出较少精力即获得高质量的候选追踪列表。
\end{enumerate}

利用软件可追踪生成辅助工具，工具会对系统做代码紧密度分析，并推荐少量候选追踪线索交由用户判断，然后根据用户判断的结果调整候选追踪列表，使得用户得到高质量的候选追踪列表。在用户判断过程中，用户可以借助工具查看目标类和目标需求的文本信息，目标类和目标需求的文本相似度，与目标类代码依赖关系紧密的其它类，以及它们之间调用关系的拓扑结构。用户通过这些信息可以更快更准确的判断候选线索有效性，从而提升候选追踪线索列表的质量。

\section{工具的体系结构}

图~\ref{F:tool_architecture}~展示了需求到代码可追踪生成辅助工具的体系结构，其中包括数据准备、信息检索、代码依赖捕获、用户交互以及候选线索列表优化五个模块。在本小节中，我们将对以上五个模块的设计与实现进行说明。

\begin{figure}[thb]
    \centering
    \includegraphics[width=1.0\textwidth]{./figures/tool/tool_architecture.png}
    \caption{软件可追踪生成辅助工具的系统体系结构图}
    \label{F:tool_architecture}
\end{figure}


\begin{enumerate}
  \item 数据准备模块：软件可追踪生成辅助工具的输入是需求文本和代码文本，这里的代码数据包含针对项目的测试集。输出是需求到代码的追踪线索列表。数据准备模块主要是提供数据导入接口。通过左上角File菜单可以将需求和代码导入工具，如图...，数据导入模块是其它所有模块的基础，在代码依赖捕获模块，工具会通过数据准备模块中导入的测试代码集合得到代码依赖；在用户交互模块，工具会展示需求和代码的文本内容；在检索模块，工具对导入的需求和代码做文本相似度计算并生成候选追踪列表。

  \item 信息检索模块：该模块是对\emph{数据准备模块}中导入的需求和代码数据进行处理。对需求文本进行文本预处理，包括移除停用词、词形还原和词干提取等操作。对于代码文本，首先需要根据命名规则进行分词，然后与需求文本进行同样的文本预处理；接下来基于信息检索技术，计算需求文本和代码文本集合之间的文本相似度。我们实现了VSM、LSI与JS这三个被广泛使用的信息检索模型，以VSM（向量空间模型）为例，将需求文本和代码文本用高维向量\emph{q、r}表示，向量中每个维度\emph{w}对应一个单词的权重，权重\emph{w}可用TF-IDF公式计算，对于\emph{q、r}两个高维向量，两者组成一条候选追踪线索，可利用余弦距离计算向量之间的余弦相似度，我们将其定义为这条追踪线索的相似度值。然后我们根据追踪线索的相似度值，对候选追踪线索按照相似度值从大到小的顺序排序，形成候选追踪列表。

  \item 代码依赖捕获模块：该模块主要负责捕获代码依赖关系，这里的代码依赖包括直接依赖（类之间的调用、使用和继承）和数据依赖（类之间的数据共享）。虽然像TPTP（The Eclipse Test \& Performance Tools Platform）和JPF（Java Plug-in Framework）等工具都能在软件系统运行过程中捕获系统中存在的方法之间的调用依赖。但是根据我们的调研，并没有一个现成的动态分析工具可以捕获方法之间的数据依赖。因此我们基于JVM提供的接口，注册函数调用数据访问等事件，并在其回调函数中存储方法进入、退出和数据访问记录，最终对该数据进一步处理得到代码依赖关系。根据项目使用的构建工具（Maven、Ant）我们采用不同的脚本运行测试集，并在此过程中通过不同的方式插桩我们的代码依赖捕获工具，得到各测试用例对应的代码依赖子集。然后我们对代码依赖子集进行合并得到代码依赖。

  \item 用户交互模块：该模块首先会对代码依赖模块捕获的代码依赖进行紧密度分析，并通过代码依赖紧密度阈值生成代码域。对于每个需求，根据各域内类与需求相似度最大值，对用户为判断域按照相似度值自大到小的顺序重排序。对于排名第一的代码域，取其域内与需求相似度值最大的类交由用户判断与需求的相关性，如图{用户界面}所示。一方面在对话框左栏用户可以选择相关、不相关、跳过该判断和结束整个判断过程，右栏是当前需求的文本内容。另一方面用户可以点击帮助查看与该类代码依赖关系紧密的其它类，以及它们之间的拓扑结构，如图所示{类依赖拓扑图}，通过点击类，用户可以查看该类的文本内容。工具会根据用户的判断结果调整候选追踪列表，继续向用户推荐下一个需要用户判断的类或者生成最终结果。

  \item 候选追踪列表优化模块：该模块会根据对代码依赖紧密度分析得到的代码域，和在用户交互模块中得到的用户反馈信息对候选追踪列表进行调整。当用户判断给定的候选追踪线索具有相关性时，对于该候选线索中的类，工具会通过不同的方式提升与该类在一个域中的其它类，和在域外但是和该类存在之间或数据依赖的类对应候选追踪线索的相似度值。该过程会迭代多次直到用户交互模块中，用户选择结束判断为止。此时工具会将候选追踪列表数据持久化到磁盘中，供软件利益相关者使用。


\end{enumerate}

\section{案例介绍}

在本小节，我们将结合一个案例说明了工具的使用方式。

\begin{figure}[thb]
    \centering
    \includegraphics[width=1.0\textwidth]{./figures/tool/user_interface.png}
    \caption{用户交互界面效果图}
    \label{F:user_interface}
\end{figure}

\begin{figure}[thb]
    \centering
    \includegraphics[width=1.0\textwidth]{./figures/tool/code_dependenct_structure.png}
    \caption{代码依赖结构展示界面效果图}
    \label{F:code_dependency_structure}
\end{figure}

\begin{figure}[thb]
    \centering
    \includegraphics[width=1.0\textwidth]{./figures/tool/query_result.pdf}
    \caption{需求到代码追踪线索列表展示界面效果图}
    \label{F:requirement_class_trace}
\end{figure}

在iTrust系统开发过程中会衍生出包括需求和代码制品在内的各种软件制品。对于软件利益相关者而言，需求到代码的可追踪性具有重要意义。软件测试人员可以更好的对软件进行测试，项目负责人可以分析软件的完成情况更好的做决策。但是敏捷软件开发过程中并不会去专门维护需求到代码的可追踪性。当用户需要得到该数据时可借助于我们的辅助工具。首先点击菜单栏的\emph{文件}选项，导入需求和代码（整个iTrust系统）。然后用户点击工具栏\emph{执行}选项，此时工具会收集iTrust系统的代码依赖，同时基于信息索引技术形成初始候选追踪线索列表。
接下来会进入用户交互界面，如图\ref{F:user_interface}所示，左栏显示了一条追踪线索，\emph{uc15}到\emph{Class}。接下来是四个选项，前两个选项\emph{相关，不相关}要求用户判断这两条线索的相关性。如果用户不确定该追踪线索可以选择第三个选项\emph{跳过}，此时工具会推荐新的候选追踪线索交由用户判断，如果用户不想继续判断，此时可选择最后一个选项\emph{停止判断}。右栏显示该候选追踪显示的需求文本信息。如果在判断过程中用户需要更多与该追踪线索相关的信息，可以选择下方的\emph{帮助}按钮，此时会进入图\ref{F:code_dependency_structure} 界面，

该界面分为两栏，左侧展示与类class之间紧密度大于紧密度阈值的其它类，并展示其拓扑结构。如图所示，每个矩形代表一个类，如果两个类是直接依赖关系则用带箭头的曲线表示，如果是数据依赖则用不带箭头的虚线表示。对于直接依赖边上的权值代表两个类之间发生的调用次数，对于数据依赖表示两个类共享的数据类型个数。直接代码依赖紧密度阈值默认为0.4，数据依赖紧密度阈值默认为0.8。用户在可以在图左下角自由设定紧密度阈值然后点击\emph{更新}按钮生成新的拓扑结构。为了提高用户体验，用户可以根据需要拖到图中各矩形，用户可以使用\emph{保存布局}按钮保存当前的布局，用户也可以使用\emph{恢复布局}按钮使图行按照上一次存储好的布局展示。右栏用来展示代码文本内容。用户在左栏点击特定的类，右栏就会展示该类的文本内容。用户可以根据代码依赖信息和类与需求的文本信息做出更高质量的判断。

当用户选择结束判断时，会进入图\ref{F:requirement_class_trace}，该界面以表格的形式更直观的向用户展示追踪线索列表数据，追踪线索按照相似度值从大到小排列。点击左上方的\emph{导出}按钮可以导出为pdf格式，方便保存。供以后软件利益相关者查阅。




\section{本章小结}
在本章中，我们介绍了需求到代码可追踪生成辅助工具的设计实现与应用场景，并辅以一个具体案例解释了工具的使用流程。需求到代码可追踪生成辅助工具能减少用户参与并且提高追踪列表的准确率和完全率。
